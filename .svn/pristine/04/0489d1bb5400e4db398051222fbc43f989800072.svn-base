/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servlets;

import control.DroneController;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.charset.Charset;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author 670918
 */
@WebServlet(name = "PreFlightServlet", urlPatterns = {"/PreFlightServlet"})
public class PreFlightServlet extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String[] commands = new String[15];
        DroneController dc = new DroneController();
        commands[0] = request.getParameter("takeoff");
        commands[1] = request.getParameter("land");
        commands[2] = request.getParameter("forward");
        commands[3] = request.getParameter("backward");
        commands[4] = request.getParameter("left");
        commands[5] = request.getParameter("right");
        commands[6] = request.getParameter("turnleft");
        commands[7] = request.getParameter("turnright");
        commands[8] = request.getParameter("remove");
        commands[9] = request.getParameter("clear");
        commands[10] = request.getParameter("execute");
        commands[11] = request.getParameter("abort");
        commands[12] = request.getParameter("wait");
        commands[13] = request.getParameter("number");
        commands[14] = request.getParameter("scan");
        
        Socket nodeSocket;
        OutputStreamWriter out;

        
        
//        BufferedReader in = new BufferedReader(new InputStreamReader(nodeSocket.getInputStream()));
  
        
//        String takeoff = request.getParameter("takeoff");
//        String land = request.getParameter("land");
//        String forward = request.getParameter("forward");
//        String backward = request.getParameter("backward");
//        String left = request.getParameter("left");
//        String right = request.getParameter("right");
//        String turnleft = request.getParameter("turnleft");
//        String turnright = request.getParameter("turnright");  
        String allTheCommands = (String) request.getParameter("cmds");
        DroneController control;
        if (request.getAttribute("control")!=null)
        {
             control = (DroneController) request.getAttribute("control");
        }
        else
        {
            control = new DroneController();
            if (allTheCommands!=null)
                control.procCommands(allTheCommands);
        }
        
        if (allTheCommands == null)
        {
            allTheCommands = "";
        }
//        else
//        {
//            control.procCommands(allTheCommands);
//        }
        
        if (!commands[13].matches("[0-9]+") && commands[14]==null && commands[8]==null && commands[9]==null && commands[10]==null && commands[11]==null&& commands[0]==null && commands[1]==null)
        {
            request.setAttribute("cmds", allTheCommands);
            request.setAttribute("error", "Please only enter a number.");
            request.getRequestDispatcher("droneCommand.jsp").forward(request, response);
        }
        
        for (int i = 0; i < commands.length; i++ )
        {
            if (commands[i] != null  && !commands[i].equals(""))
            {
                switch (i)
                {
                    case 0:
                        allTheCommands = allTheCommands + "takeoff:0;";
                        break;
                    case 1:
                        allTheCommands = allTheCommands + "land:0;";
                        break;
                    case 2:
                        allTheCommands = allTheCommands + "forward:"+commands[13]+";";
                        break;
                    case 3:
                        allTheCommands = allTheCommands + "backward:"+commands[13]+";";
                        break;
                    case 4:
                        allTheCommands = allTheCommands + "left:"+commands[13]+";";
                        break;
                    case 5:
                        allTheCommands = allTheCommands + "right:"+commands[13]+";";
                        break;
                    case 6:
                        allTheCommands = allTheCommands + "turnleft:"+commands[13]+";";
                        break;
                    case 7:
                        allTheCommands = allTheCommands + "turnright:"+commands[13]+";";
                        break;
                    case 8:
                        // do nothing for now
                        break;
                    case 9:
                        control.clearCommands();
                        allTheCommands="";
                        break;
                    case 10:
                        nodeSocket = new Socket("localhost", 30001);
                        out = new OutputStreamWriter(nodeSocket.getOutputStream(), "UTF-8");
                        out.write(allTheCommands, 0, allTheCommands.length());
                        out.close();
                        allTheCommands="";
                        break;
                    case 11:
                        nodeSocket = new Socket("localhost", 30001);
                        out = new OutputStreamWriter(nodeSocket.getOutputStream(), "UTF-8");
                        out.write("abort:0;", 0, "abort:0;".length());
                        out.close();
                        allTheCommands="";
                        break;
                    case 12:
                        allTheCommands = allTheCommands + "wait:"+commands[13]+";";
                        break;
                    case 14:
                        allTheCommands = allTheCommands + "scan:0;";
                        break;
                }
            }
        }
        request.setAttribute("cmds", allTheCommands);
        
        request.getRequestDispatcher("droneCommand.jsp").forward(request, response);
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
